<Window x:Class="Follow_The_Pointer.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Follow_The_Pointer"
        mc:Ignorable="d"
        Title="Follow The Pointer" Width="640" Height="480">
    <Window.Resources>
        <ControlTemplate TargetType="{x:Type ContentControl}" x:Key="ContentControlControlTemplate1" >
            <Grid x:Name="Grid" >
                <Rectangle RadiusX="10" RadiusY="10" x:Name="Rectangle" Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="1" Margin="5,5,5,5"/>
                <ContentPresenter x:Name="ContentPresenter" HorizontalAlignment="Center" Margin="5,5,0,5" VerticalAlignment="Center" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"/>
            </Grid>
        </ControlTemplate>
    </Window.Resources>

    <Grid x:Name="LayoutRoot">
        <Grid.Background>
            <LinearGradientBrush EndPoint="0.5,0.0" StartPoint="0.5,1.0">
                <GradientStop Color="#FF545454" Offset="0"/>
                <GradientStop Color="#FFFFFFFF" Offset="1"/>
                <GradientStop Color="#FF232323" Offset="0.155"/>
                <GradientStop Color="#FF797878" Offset="0.845"/>
            </LinearGradientBrush>
        </Grid.Background>
        <RichTextBox x:Name="AnnotationLayer" Width="250" HorizontalAlignment="Left" Margin="-325,0,0,0" VerticalAlignment="Center" Height="Auto" Grid.RowSpan="2">
            <FlowDocument>
                <Paragraph>
                    <Run>The Follow The Pointer sample demonstrates how to use vector and velocity calculations in your code-behind file.  Each time your scene is rendered, the movement of a custom control is calculated based on the position of the mouse cursor.  Producing animation in a code-behind file is very efficient.</Run>
                </Paragraph>
                <Paragraph>
                    <Run>Please see comments in the source code file (Window1.xaml.cs) and the Help topic titled Follow-The-Pointer, which is accessible from the Samples and Tutorials Gallery in Help (press F1). Samples are accessible from the Welcome Screen (click Help, Welcome Screen).</Run>
                </Paragraph>
            </FlowDocument>
        </RichTextBox>
        <DockPanel  Margin="8,8,8,8" x:Name="DockPanel"   LastChildFill="False">
            <TextBlock HorizontalAlignment="Right" Margin="4,4,4,4" x:Name="SampleTitle"   TextWrapping="Wrap" DockPanel.Dock="Top">
				<Run FontSize="14" FontWeight="Bold">Follow the Pointer</Run>
            </TextBlock>
            <TextBlock HorizontalAlignment="Right" Margin="4,4,4,4" x:Name="SampleDescription"   TextWrapping="Wrap" DockPanel.Dock="Top">
				<Run FontSize="12" FontWeight="Bold">Move the mouse cursor around as the gold control follows.</Run>
            </TextBlock>
            <StackPanel Margin="4,4,4,4" x:Name="ControlStack" Width="Auto" Height="Auto" DockPanel.Dock="Right" VerticalAlignment="Center">
                <StackPanel.Background>
                    <LinearGradientBrush EndPoint="0.508,-0.004" StartPoint="0.508,1.008">
                        <GradientStop Color="#C7E5E5E5" Offset="0"/>
                        <GradientStop Color="#FFFFFFFF" Offset="1"/>
                        <GradientStop Color="#A49C9C9C" Offset="0.376"/>
                        <GradientStop Color="#C7E5E5E5" Offset="0"/>
                    </LinearGradientBrush>
                </StackPanel.Background>
                <Label Margin="4,0,4,2" x:Name="SpringLabel"  Content="Spring strength:"/>
                <Slider Margin="4,2,4,4" x:Name="SpringSlider" TabIndex="2" Value="150" Maximum="300" Minimum="1" SmallChange="1" LargeChange="50"/>
                <Label Margin="4,4,4,2" x:Name="DampingLabel" Content="Speed:"/>
                <Slider Margin="4,2,4,4" x:Name="DampingSlider" TabIndex="3" Value="3" Maximum="10" Minimum="0.1" SmallChange="0.1" LargeChange="1"/>
                <Label Margin="4,4,4,2" x:Name="SizeLabel" Content="Size:"/>
                <Slider Margin="4,2,4,4" x:Name="SizeSlider" TabIndex="4" Value="100" Maximum="500" Minimum="10" SmallChange="1" LargeChange="5"/>
                <Label Margin="4,4,4,2" x:Name="ContentLabel" Content="Content:" />
                <TextBox Margin="4,2,4,4" x:Name="ContentTextBox" TabIndex="5" Text="WPF" TextWrapping="Wrap"/>
                <CheckBox Margin="4,4,4,4" x:Name="ShowCodeCheckBox" Content="Show Code" TabIndex="6" IsChecked="True"/>
            </StackPanel>
            <FlowDocumentScrollViewer Margin="4,4,4,4" x:Name="SourceCodeViewer" VerticalAlignment="Bottom" Foreground="#4DFFFFFF" HorizontalContentAlignment="Stretch" TabIndex="7" VerticalScrollBarVisibility="Hidden" HorizontalScrollBarVisibility="Hidden" Visibility="Visible" Opacity="{Binding IsChecked, ElementName=ShowCodeCheckBox, Mode=Default}">
                <FlowDocument TextAlignment="Left" FontFamily="Courier New" FontSize="14" >
                    <Paragraph>
                        <Span>
                            <Run>private TranslateTransform translation = new TranslateTransform();</Run>
                        </Span>
                    </Paragraph>
                    <Paragraph>
                        <Span>
                            <Run>private const double epsilon = 1;</Run>
                        </Span>
                    </Paragraph>
                    <Paragraph>
                        <Span>
                            <Run>private Stopwatch stopwatch = new Stopwatch();</Run>
                        </Span>
                    </Paragraph>
                    <Paragraph>
                        <Span>
                            <Run>private Vector velocity = new Vector();</Run>
                        </Span>
                    </Paragraph>
                    <Paragraph>
                        <Span>
                            <Run>private TimeSpan prevTime = TimeSpan.Zero;</Run>
                        </Span>
                    </Paragraph>
                    <Paragraph TextAlignment="Left" FontFamily="Courier New" FontSize="14" />
                    <Paragraph>
                        <Span>
                            <Run>public Window1()</Run>
                        </Span>
                    </Paragraph>
                    <Paragraph>
                        <Span>
                            <Run>{</Run>
                        </Span>
                    </Paragraph>
                    <Paragraph>
                        <Span>
                            <Run xml:space="preserve">    this.InitializeComponent();</Run>
                        </Span>
                    </Paragraph>
                    <Paragraph>
                        <Span>
                            <Run>}</Run>
                        </Span>
                    </Paragraph>
                    <Paragraph/>
                    <Paragraph>
                        <Span>
                            <Run>protected override void OnInitialized(EventArgs e)</Run>
                        </Span>
                    </Paragraph>
                    <Paragraph>
                        <Span>
                            <Run>{</Run>
                        </Span>
                    </Paragraph>
                    <Paragraph>
                        <Span>
                            <Run xml:space="preserve">    base.OnInitialized(e);</Run>
                        </Span>
                    </Paragraph>
                    <Paragraph/>
                    <Paragraph>
                        <Span>
                            <Run xml:space="preserve">    CompositionTarget.Rendering += this.CompositionTarget_Rendering;</Run>
                        </Span>
                    </Paragraph>
                    <Paragraph/>
                    <Paragraph>
                        <Span>
                            <Run xml:space="preserve">    this.MovableControl.RenderTransform = this.translation;</Run>
                        </Span>
                    </Paragraph>
                    <Paragraph/>
                    <Paragraph>
                        <Span>
                            <Run xml:space="preserve">    this.stopwatch.Start();</Run>
                        </Span>
                    </Paragraph>
                    <Paragraph>
                        <Span>
                            <Run>}</Run>
                        </Span>
                    </Paragraph>
                    <Paragraph/>
                    <Paragraph>
                        <Span>
                            <Run>private void CompositionTarget_Rendering(object sender, EventArgs e)</Run>
                        </Span>
                    </Paragraph>
                    <Paragraph>
                        <Span>
                            <Run>{</Run>
                        </Span>
                    </Paragraph>
                    <Paragraph>
                        <Span>
                            <Run xml:space="preserve">    Point mousePos = Mouse.GetPosition(this.MovableControl); </Run>
                        </Span>
                    </Paragraph>
                    <Paragraph/>
                    <Paragraph>
                        <Span>
                            <Run xml:space="preserve">    TimeSpan currentTime = this.stopwatch.Elapsed;</Run>
                        </Span>
                    </Paragraph>
                    <Paragraph>
                        <Span>
                            <Run xml:space="preserve">    double elapsedTime = (currentTime - this.prevTime).TotalSeconds;</Run>
                        </Span>
                    </Paragraph>
                    <Paragraph>
                        <Span>
                            <Run xml:space="preserve">    this.prevTime = currentTime;</Run>
                        </Span>
                    </Paragraph>
                    <Paragraph/>
                    <Paragraph>
                        <Span>
                            <Run xml:space="preserve">    Vector force = new Vector(mousePos.X, mousePos.Y);</Run>
                        </Span>
                    </Paragraph>
                    <Paragraph/>
                    <Paragraph>
                        <Span>
                            <Run xml:space="preserve">    force = (force * this.SpringSlider.Value - this.velocity * this.DampingSlider.Value) * elapsedTime;</Run>
                        </Span>
                    </Paragraph>
                    <Paragraph/>
                    <Paragraph>
                        <Span>
                            <Run xml:space="preserve">    this.velocity += force;</Run>
                        </Span>
                    </Paragraph>
                    <Paragraph/>
                    <Paragraph>
                        <Span>
                            <Run xml:space="preserve">    if (velocity.Length &lt; epsilon) </Run>
                        </Span>
                    </Paragraph>
                    <Paragraph>
                        <Span>
                            <Run>return;</Run>
                        </Span>
                    </Paragraph>
                    <Paragraph/>
                    <Paragraph>
                        <Span>
                            <Run xml:space="preserve">    this.translation.X += this.velocity.X * elapsedTime; </Run>
                        </Span>
                    </Paragraph>
                    <Paragraph>
                        <Span>
                            <Run xml:space="preserve">    this.translation.Y += this.velocity.Y * elapsedTime;</Run>
                        </Span>
                    </Paragraph>
                    <Paragraph>
                        <Span>
                            <Run>}</Run>
                        </Span>
                    </Paragraph>
                    <Paragraph TextAlignment="Left" FontFamily="Times New Roman" FontSize="16" />
                    <Paragraph>
                        <Run></Run>
                    </Paragraph>
                </FlowDocument>
            </FlowDocumentScrollViewer>
        </DockPanel>
        <ContentControl  x:Name="MovableControl"  Template="{DynamicResource ContentControlControlTemplate1}" Foreground="#FFFFFFFF" TabIndex="1" RenderTransformOrigin="0.5,0.5" Margin="0,0,0,0" OverridesDefaultStyle="False" HorizontalAlignment="Center" VerticalAlignment="Center" Width="90.927" Height="70.837">
            <ContentControl.Background>
                <LinearGradientBrush EndPoint="0.484,-0.065" StartPoint="0.508,1.197">
                    <GradientStop Color="#FFFFFFFF" Offset="1"/>
                    <GradientStop Color="#CB959595" Offset="0"/>
                    <GradientStop Color="#BA8D8B8E" Offset="0.44"/>
                </LinearGradientBrush>
            </ContentControl.Background>
            <ContentControl.BorderBrush>
                <x:Null/>
            </ContentControl.BorderBrush>
            <ContentControl.RenderTransform>
                <TransformGroup>
                    <ScaleTransform ScaleX="1" ScaleY="1"/>
                    <SkewTransform AngleX="0" AngleY="0"/>
                    <RotateTransform Angle="0"/>
                    <TranslateTransform X="0" Y="0"/>
                </TransformGroup>
            </ContentControl.RenderTransform>
            <TextBlock x:Name="ContentText"  Text="{Binding Path=Text, ElementName=ContentTextBox, Mode=Default}" TextWrapping="Wrap"/>
        </ContentControl>
    </Grid>
</Window>
